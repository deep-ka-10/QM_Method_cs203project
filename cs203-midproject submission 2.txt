1)definition of input and outputs

input

user should enter Number of varibles ,number of minterms(including number of don't care minterms) and then number of don't cares.
* The number of minterms cannot be greater than 2^number of varibles nor smaller than 1.
*The number of Don't-Care minterms cannot be greater than the  number of all minterms nor smaller than 0.

then we scan the minterms indices in decimal format in an array.
*user should enter the minterm indices as decimal numbers in ascending order (MintermIndicesDecimal[i]).
*each minterm indices value enterd should be smaller than 2^number of varibles.

then we scan the DontCare minterms indicesin decimal format in another array.
*user should enter the minterm indices as decimal numbers in ascending order (DontCareDecimal[i]).
*each DontCare minterm indices value enterd should be smaller than 2^number of varibles.

output

we will get the optimized boolean expresion of the given function.
the output expression will be minimized expression with characters like a,a',b,b',....


2) functionality and scoping

Quine-McCluskey (QM) method is one of the most powerful techniques to simplify Boolean expressions
so,we will minimise the boolean expression using the concept of Quine-McCluskey Method in c language.

The QM method is based on the reduction principle, which says that (AB+AB` = A).
 It means that when two terms contain the same variables differ only in one variable, they can be
combined together and form a new term smaller by one literal. 

All the terms in the Boolean function are tested for possible combination of any two of them, after which
a new sets of terms that are smaller by one literal are produced and are further tested
under the same procedures for further reduction. The same procedures will be repeated until no terms can be combined anymore. 

Procedures and implementation of QM method 

1)All the minterms and don't care terms entered by user are converted from decimal to binary numbers.

2)then they are arranged into different groups according to the number of 1s in the binary representation. 
These groups are put in ascending order in a Column.
we will store these binary numbers in the two-dimensional array

3)Every two minterms from two adjacent groups are paired for possible combination if they only differ in one variable. 
The digit which is different is replaced by ‘X’(which is denoted by 2). After the first round of pairing, a new sets of terms that are smaller 
by one literalare produced and placed in a column . Terms in the Column are further paired for further reduction. The same procedures will be 
repeated until no terms can be paired anymore. 
To store the terms in the columns, the fourdimensional array Column[][][][] is used.

4) terms with more than one ‘X’ will always have duplicates.Thus, all the duplicates need to be removed. The remaining irreducible terms are PIs.

5)A ‘PI chart’ will be made. Each columnrepresents a minterm and each row represents a PI. In the first step, all the Don’t-Care minterms is removed.

6)Column with only a single element coloumn indicates a minterm covered by only one PI, which means this PI is EPI. All the rows of EPI and the 
corresponding columns that are covered will be removed.

7)The remaining PIs and minterms will form a new the Reduced PI chart.The next step is to find a sets of PIs which cover all the terms in the Reduced 
PI chart but contain the least possible number of PIs. This set of PIs will be the rest EPIs.



